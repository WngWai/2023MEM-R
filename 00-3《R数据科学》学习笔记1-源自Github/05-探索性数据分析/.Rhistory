getwd()
# load package
library(tidyverse)
# 对分布的可视化
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
diamonds %>%
count(cut)
diamonds$carat
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = carat))
ggplot(data = diamonds) +
geom_histogram(mapping = aes(x = carat))
smaller <- diamonds %>%
filter(carat < 3)
ggplot(data = smaller, mapping = aes(x = carat)) +
geom_histogram(binwidth = 0.1)
ggplot(data = smaller, mapping = aes(x = carat)) +
geom_histogram(binwidth = 0.2)
ggplot(data = smaller, mapping = aes(x = carat)) +
geom_histogram(binwidth = 0.5)
ggplot(data = smaller, mapping = aes(x = carat)) +
geom_histogram(binwidth = 0.1)
# 非叠加直方图
ggplot(data = smaller, mapping = aes(x = carat, color = cut)) +
geom_freqpoly(binwidth = 0.1)
# 非叠加直方图
ggplot(data = smaller, mapping = aes(x = carat, color = cut)) +
geom_freqpoly(binwidth = 0.1)
# 非叠加直方图
ggplot(data = smaller, mapping = aes(x = carat, color = cut, size = 2)) +
geom_freqpoly(binwidth = 0.1)
# 非叠加直方图
ggplot(data = smaller, mapping = aes(x = carat, color = cut, size = 1)) +
geom_freqpoly(binwidth = 0.1)
# 非叠加直方图
ggplot(data = smaller, mapping = aes(x = carat, color = cut, size = 0.5)) +
geom_freqpoly(binwidth = 0.1)
# 非叠加直方图
ggplot(data = smaller, mapping = aes(x = carat, color = cut, size = 0.1)) +
geom_freqpoly(binwidth = 0.1)
# 非叠加直方图
ggplot(data = smaller, mapping = aes(x = carat, color = cut)) +
geom_freqpoly(binwidth = 0.1)
# 非叠加直方图
ggplot(data = smaller, mapping = aes(x = carat, color = cut, size = 0.1)) +
geom_freqpoly(binwidth = 0.1)
# 非叠加直方图
ggplot(data = smaller, mapping = aes(x = carat, color = cut, size = 01)) +
geom_freqpoly(binwidth = 0.1)
# 非叠加直方图
ggplot(data = smaller, mapping = aes(x = carat, color = cut, size = 0.05)) +
geom_freqpoly(binwidth = 0.1)
# 非叠加直方图
ggplot(data = smaller, mapping = aes(x = carat, color = cut), size = 0.1) +
geom_freqpoly(binwidth = 0.1)
# 非叠加直方图
ggplot(data = smaller, mapping = aes(x = carat, color = cut), size = 0.5) +
geom_freqpoly(binwidth = 0.1)
# 非叠加直方图
ggplot(data = smaller, mapping = aes(x = carat, color = cut), size = 1) +
geom_freqpoly(binwidth = 0.1)
# 非叠加直方图
ggplot(data = smaller, mapping = aes(x = carat, color = cut), size = 2) +
geom_freqpoly(binwidth = 0.1)
# 非叠加直方图
ggplot(data = smaller, mapping = aes(x = carat, color = cut)) +
geom_freqpoly(binwidth = 0.1, size = 5)
# 非叠加直方图
ggplot(data = smaller, mapping = aes(x = carat, color = cut)) +
geom_freqpoly(binwidth = 0.1, size = 0.1)
# 非叠加直方图
ggplot(data = smaller, mapping = aes(x = carat, color = cut)) +
geom_freqpoly(binwidth = 0.1, size = 0.5)
# 非叠加直方图
ggplot(data = smaller, mapping = aes(x = carat, color = cut)) +
geom_freqpoly(binwidth = 0.1, size = 1)
# 非叠加直方图
ggplot(data = smaller, mapping = aes(x = carat, color = cut)) +
geom_freqpoly(binwidth = 0.1, size = 2)
# 非叠加直方图
ggplot(data = smaller, mapping = aes(x = carat, color = cut)) +
geom_freqpoly(binwidth = 0.1, size = 1.5)
# 非叠加直方图
ggplot(data = smaller, mapping = aes(x = carat, color = cut)) +
geom_freqpoly(binwidth = 0.1, size = 1)
ggplot(diamonds) +
geom_histogram(mapping= aes(x = y), binwidth = 0.5)
ggplot(diamonds) +
geom_histogram(mapping= aes(x = y), binwidth = 0.5) +
coord_cartesian(ylim = c(0, 50))
diamonds
# 处理异常值
diamonds_NA <- diamonds %>%
mutate(y = ifelse(y <3 | y>20, NA, y))
ggplot(data = diamonds_NA, mapping = aes(x = x, y = y)) +
geom_point()
# density
ggplot(
data = diamonds,
mapping = aes(x = price, y = ..density..)
) +
geom_freqpoly(mapping = aes(colot = cut), binwidth = 500)
# density
ggplot(
data = diamonds,
mapping = aes(x = price, y = ..density..)
) +
geom_freqpoly(mapping = aes(colot = cut), binwidth = 500)
# density
ggplot(
data = diamonds,
mapping = aes(x = price, y = ..density..)
) +
geom_freqpoly(mapping = aes(color = cut), binwidth = 500)
# box plot
ggplot(data = diamonds, mapping = aes(x = cut, y = price)) +
geom_boxplot()
# 进行重新排序
ggplot(data = mpg) +
geom_boxplot(
x = recode(class, hwy, FUN = median),
y = hwy
)
# 进行重新排序
ggplot(data = mpg) +
geom_boxplot(
x = recode(class, hwy, FUN = median),
y = hwy
) +
coord_flip()
# 进行重新排序
ggplot(data = mpg) +
geom_boxplot(
x = record(class, hwy, FUN = median),
y = hwy
) +
coord_flip()
# 进行重新排序
ggplot(data = mpg) +
geom_boxplot(
x = reorder(class, hwy, FUN = median),
y = hwy
) +
coord_flip()
diamonds %>% count(color, cut)
# 使用title
diamonds %>%
count(color, cut) %>%
ggplot(mapping = aes(x = color, y = cut)) +
geom_tile(mapping = aes(fill = n))
# 两个连续变量
ggplot(data = diamonds) +
geom_point(mapping = aes(x = carat, y = price))
ggplot(data = diamonds) +
geom_point(
mapping = aes(x = carat, y = price),
alpha = 1 / 100
)
source("C:/Users/yinia/Desktop/RForDataScienceNotes/05-探索性数据分析/eda.R", echo=TRUE)
# load package
library(tidyverse)
# 对分布的可视化，bar chat的横坐标为分类
ggplot(data = diamonds) +
geom_bar(mapping = aes(x = cut))
diamonds %>%
count(cut)
smaller <- diamonds %>%
filter(carat < 3)
ggplot(data = smaller, mapping = aes(x = carat)) +
geom_histogram(binwidth = 0.1)
# 非叠加直方图
ggplot(data = smaller, mapping = aes(x = carat, color = cut)) +
geom_freqpoly(binwidth = 0.1, size = 1)
# 统计
ggplot(diamonds) +
geom_histogram(mapping= aes(x = y), binwidth = 0.5)
ggplot(diamonds) +
geom_histogram(mapping= aes(x = y), binwidth = 0.5) +
coord_cartesian(ylim = c(0, 50))
# 处理异常值
diamonds_NA <- diamonds %>%
mutate(y = ifelse(y <3 | y>20, NA, y))
ggplot(data = diamonds_NA, mapping = aes(x = x, y = y)) +
geom_point()
# 航班比较
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %|% 100,
)
# 航班比较
nycflights13::flights %>%
mutate(
cancelled = is.na(dep_time),
sched_hour = sched_dep_time %|% 100,
)
# geom_bin2d 和 geom_hex()
ggplot(data = smaller) +
geom_bin2d(mapping = aes(x = carat, y = price))
ggplot(data = smaller) +
geom_hex(mapping = aes(x = carat, y = price))
ggplot(data = smaller) +
geom_hex(mapping = aes(x = carat, y = price))
install.library(hexbin)
install.packages(hexobin)
install.packages(hexbin)
install.packages("hexbin")
ggplot(data = smaller) +
geom_hex(mapping = aes(x = carat, y = price))
ggplot(data = smaller, mapping = aes(x = carat, y = price)) +
geom_boxplot(mapping = aes(group = cut_width(carat, 0.1)))
ggplot(data = faithful) +
geom_point(mapping = aes(x = eruptions, y = waitting))
ggplot(data = faithful) +
geom_point(mapping = aes(x = eruptions, y = waiting))
