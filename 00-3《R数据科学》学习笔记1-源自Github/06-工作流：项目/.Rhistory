Sys.Date()
date()
today <- Sys.Date()
format(today, format="%B %d %Y")
format(today, format="%A")
a <- c(1, 2, 3)
a
is.numeric(a)
is.vector(a)
a <- as.character(a)
a
is.numeric(a)
is.character(a)
manager <- c(1, 2, 3, 4, 5)
date <- c("10/24/08", "10/28/08", "10/1/08", "10/12/08", "5/1/09")
country <- c("US", "US", "UK", "UK", "UK")
gender <- c("M", "F", "F", "M", "F")
age <- c(32, 45, 25, 39, 99)
q1 <- c(5, 3, 3, 3, 2)
q2 <- c(4, 5, 5, 3, 2)
q3 <- c(5, 2, 5, 4, 1)
q4 <- c(5, 5, 5, NA, 2)
q5 <- c(5, 5, 2, NA, 1)
leadership <- data.frame(manager, date, country, gender, age, q1, q2, q3, q4, q5, stringsAsFactors = FALSE)
leadership
newdata <- leadership[order(leadership$age),]
newdata
attach(leadership)
newdate <- leadership[order[gender, age],]
datach(leadership)
manager <- c(1, 2, 3, 4, 5)
date <- c("10/24/08", "10/28/08", "10/1/08", "10/12/08", "5/1/09")
country <- c("US", "US", "UK", "UK", "UK")
gender <- c("M", "F", "F", "M", "F")
age <- c(32, 45, 25, 39, 99)
q1 <- c(5, 3, 3, 3, 2)
q2 <- c(4, 5, 5, 3, 2)
q3 <- c(5, 2, 5, 4, 1)
q4 <- c(5, 5, 5, NA, 2)
q5 <- c(5, 5, 2, NA, 1)
leadership <- data.frame(manager, date, country, gender, age, q1, q2, q3, q4, q5, stringsAsFactors = FALSE)
leadership
attach(leadership)
newdate <- leadership[order[gender, age],]
datach(leadership)
---
title: "01_introduction"
x <- vector() # an empty logical vector (default one)
x
length(x)
y <- vector("character", length = 5)
y
numeric(5)
logical(5)
character(5)
integer(5)
x <- c(1, 2, 3, 4, "a")
x
x <- c(1L,2L,3L,4L,5L)
x
x <- c(1, 2, 3, 4, "5")
x
y <- as.numeric(x)
y
y
x <- c(1, 2, 3, 4, "abc")
y <- as.numeric(x)
y
x <- c(2, 2)
x
x <- c(2, 2)
x
y <- c(x, x, x)
y
z <- c(x, 12)
z
x <- c(1:10)
x
x <- 1:10
x
x
x <- seq(from = 0, to 20, by = 2)
x <- c(1:10)
x
x <- 1:10
x
x <- seq(10)
x
x <- seq(from = 0, to = 20, by = 2)
x
x <- c(1, 2, 3, NA, 5)
x
class(x)
x <- c("a", "b", "c", NA, "e")
class(x)
1 / 0
0 / 0
log(-1)
x <- c("a" = 1, "b" = 2, "c" = 3)
x
attributes(x)
m <- matrix(nrow = 2, ncol = 3)
m
class(m)
dim(m)
m <- matrix(c(1:6), 2, 3)
m
m <- matrix(letters, ncol = 2, byrow = TRUE)
m
x <- 1:12
dim(x) <- c(2, 3, 2)  # 一个三维的array
x
class(x)
typeof(x)
x[2, 3, 2]
df <- data.frame(id = letters[1:10], x = 1:10, y = 11:20)
df
names(df)
dim(df)
df["y"]
df$id
mtcars
head(mtcars)
tail(mtcars)
ncol(mtcars)
nrow(mtcars)
dim(mtcars)
colour <- c("red", "blue", "red", "red")
colour
colour_f <- factor(colour)
colour_f
x <- 1 : 10
x
x * 2
y <- 11 : 20
x + y
res <- numeric(length = 10)
res <- numeric(length = 10)
for (i in seq(1, length = 10)){
res[i] <- x[i] + y[i]
}
res
x <- 1:10
res <- c()
for (i in x){
res <- c(res, i * 2)
}
res
x <- 0
while(x < 5){
print(x)
x <- x + 1
}
x <- 0
repeat{
print(x)
x <- x + 1
if (x > 5){
break
}
}
miles.to.kilometers <- function(miles){
kilometers <- miles * 1.90934
return(kilometers)
}
miles.to.kilometers(250)
miles.to.kilometers <- function(miles){
kilometers <- miles * 1.60934
return(kilometers)
}
miles.to.kilometers(250)
x <- 10
if (x < 20){
print(x)
}
x <- 20
if (x < 10){
print("x < 10")
} else{
print("x > 10")
}
x <- 50
if (x < 50){
print("x < 50")
} else if (x == 50){
print("x = 50")
} else{
print("x > 50")
}
# or we can import all data by using another method
data_df <- list.files(patter = "\\.csv$") %>% lapply(read.csv) %>% %>% bind_rows
# or we can import all data by using another method
data_df <- list.files(pattern = "\\.csv$") %>% lapply(read.csv) %>% %>% bind_rows
# or we can import all data by using another method
data_df <- list.files(pattern = "\\.csv$") %>% lapply(read.csv) %>% bind_rows
library(dplyr)
library(tidyverse)
# or we can import all data by using another method
data_df <- list.files(pattern = "\\.csv$") %>% lapply(read.csv) %>% bind_rows
View(data_df)
View(data_df)
# question 01: import all data into 1 data frame
data_df <- bind_rows(lapply(list.files(pattern="\\.csv$"), read.csv))  # method 01
View(data_df)
View(data_df)
library(dplyr)
library(tidyverse)
# question 01: import all data into 1 data frame
data_df <- bind_rows(lapply(list.files(pattern="\\.csv$"), read.csv))  # method 01
View(data_df)
View(data_df)
library(dplyr)
library(tidyverse)
# or we can import all data by using another method
data_df <- list.files(pattern = "\\.csv$") %>%
lapply(read.csv) %>% bind_rows
View(data_df)
View(data_df)
# Q2
data_df_popu <- data_df %>%
mutate(Population = case_when(
REGION == "NSW1" ~ 8176.4,
REGION == "QLD1" ~ 5206.4,
REGION == "SA1" ~ 1771.7,
REGION == "TAS1" ~ 542,
REGION == "VIC1" ~ 6648.6
))
data_df_popu$DemandPerCapita = data_df_popu$TOTALDEMAND / data_df_popu$Population
install.packages("rio")
install.packages("data.table")
install.packages("stringr")
plot(cars)
# 例：生成100个均值为10的指数分布随机数
> x=rexp(100,1/6)
# 例：生成100个均值为10的指数分布随机数
x=rexp(100,1/6)
hist(x,prob=T,col=gray(0.9),main="均值为6的指数分布随机数")
set.seed(1)
mns=NULL
for (i in 1 : 1000) mns = c(mns, mean(rexp(1000,6)))
data <- data.frame(mns,size=40)
hist(data)
rexp(1000, rate=1)
rexp(1000, rate=6)
# Import queueing package
library(queueing)
# Set queue model input parameters
input_mm1 <- NewInput.MM1(lambda = 3, mu = 4, n = 0)
# Create queue class object
output_mm1 <- QueueingModel(input_mm1)
# Get queue model report
Report(output_mm1)
# Get queue model summary
summary(output_mm1)
install.packages("queueing")
# Import queueing package
library(queueing)
# Set queue model input parameters
input_mm1 <- NewInput.MM1(lambda = 3, mu = 4, n = 0)
# Create queue class object
output_mm1 <- QueueingModel(input_mm1)
# Get queue model report
Report(output_mm1)
# Set seed for reproducibility
set.seed(500)
# Specify size
N <- 100
# Draw exp distributed values
y_rexp <- rexp(N, rate = 1)
# Plot exp density
hist(y_rexp, breaks = 50, main = "")
# Plot exp density
hist(y_rexp, main = "")
# Set seed for reproducibility
set.seed(500)
# Specify size
N <- 100
# Draw exp distributed values
y_rexp <- rexp(N, rate = 1)
# Plot exp density
hist(y_rexp, main = "")
# Set seed for reproducibility
set.seed(500)
# Specify size
N <- 100
# Draw exp distributed values
y_rexp <- rexp(N, rate = 1)
# Plot exp density
hist(y_rexp, main = "")
# Set seed for reproducibility
set.seed(500)
# Specify size
N <- 100
# Draw exp distributed values
y_rexp <- rexp(N, rate = 6)
# Plot exp density
hist(y_rexp, main = "")
hist(y_rexp)
hist(y_rexp, main = "")
set.seed(100)
N <- 100
y_rexp <- rexp(N, rate = 6)
hist(y_rexp, main = "")
set.seed(1000)
N <- 100
y_rexp <- rexp(N, rate = 6)
hist(y_rexp, main = "")
exp_distribution(n){
exp_distribution(n){
exp_distribution <- function(n){
return ( 6 * exp(-6 * 2 * n))
}
exp_distribution <- function(n){
return ( 6 * exp(-6 * 2 * n))
}
simulation_result <- exp_distribution(2) + exp_distribution(1) + exp_distribution(0)
simulation_result
exp_distribution <- function(n){
return ( 6 * exp(-6 * 2 * n))
}
simulation_result <- exp_distribution(2)
+ exp_distribution(1)
+ exp_distribution(0)
simulation_result
exp_distribution <- function(n){
return ( 6 * exp(-12 * n))
}
simulation_result <- exp_distribution(2)  + exp_distribution(1) + exp_distribution(0)
simulation_result
runif(5)
runif(5)
set.seed(1234)
runif(5)
runif(5)
runif(5)
runif(5)
set.seed(1234)
runif(5)
set.seed(5)
sdf
runif(5)
runif(5)
set.seed(1234)
runif(5)
set.seed(1234)
runif(5)
library(MASS)
options(digits=3)
set.seed(1234)
mean <- c(230.7, 146.7, 3.6)
sigma <- matrix(c(15360.8, 6721.2, -47.1, 6721.2, 4700.9, -16.5, -47.1, -16.5, 0.3), nrow=3, ncol=3)
mydata <- mvrnorm(500, mean, sigma)
mydata <- as.data.frame(mydata)
names(mydata) <- c("y","x1","x2")
dim(mydata)
head(mydata, n=10)
options(digits=2)Student <- c("John Davis", "Angela Williams", "Bullwinkle Moose",
options(digits=2)
Student <- c("John Davis", "Angela Williams", "Bullwinkle Moose",
"David Jones", "Janice Markhammer", "Cheryl Cushing",
"Reuven Ytzrhak", "Greg Knox", "Joel England",
"Mary Rayburn")
Math <- c(502, 600, 412, 358, 495, 512, 410, 625, 573, 522)
Science <- c(95, 99, 80, 82, 75, 85, 80, 95, 89, 86)
English <- c(25, 22, 18, 15, 20, 28, 15, 30, 27, 18)
roster <- data.frame(Student, Math, Science, English,
stringsAsFactors=FALSE)
z <- scale(roster[,2:4])
score <- apply(z, 1, mean)
roster <- cbind(roster, score)
y <- quantile(score, c(.8,.6,.4,.2))
roster$grade[score >= y[1]] <- "A"
roster$grade[score < y[1] & score >= y[2]] <- "B"
roster$grade[score < y[2] & score >= y[3]] <- "C"
roster$grade[score < y[3] & score >= y[4]] <- "D"
roster$grade[score < y[4]] <- "F"
name <- strsplit((roster$Student), " ")
Lastname <- sapply(name, "[", 2)
Firstname <- sapply(name, "[", 1)
roster <- cbind(Firstname,Lastname, roster[,-1])
roster <- roster[order(Lastname,Firstname),]
roster
options(digits=2)
roster
z <- scale(roster[,2:4])
z <- scale(roster[,2:4])
z
pnorm(6.5, 10, sqrt(10))
pnorm(6.5, 10, sqrt(2))
pnorm(6, 10, sqrt(10))
pnorm(6.5, 10, sqrt(10))
# 加载两个packages
library(tidyverse)
library(ggplot2)
# ---------- 分面
ggplot(data = mpg) +
geom_point(mapping = aex(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
# ---------- 分面
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(drv ~ cyl)
# ---------- 练习
ggplot(data = mpg) +
geom_point(mapping = aes(x = displ, y = hwy)) +
facet_grid(~ cty)
ggplot(mpg)+geom_point(mapping = aes(x=drv,y=cyl))
ggplot(mpg)+geom_point(mapping = aes(x=drv,y=cyl)) + facet_grid(drv ~ cyl)
ggplot(mpg) + geom_point(mapping = aes(x = displ, y = hwy)) + facet_grid(drv ~ .)
ggplot(npg) + geom_point(mapping = aes(x = drv, y = hwy)) + facet_grid(. ~ cyl)
ggplot(mpg) + geom_point(mapping = aes(x = drv, y = hwy)) + facet_grid(. ~ cyl)
ggplot(data = mpg) +
geom_point(mapping = aes(x=displ, y = hwy)) +
facet_wrap(~ class, nrow = 2)
# ---------- 几何对象
ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
library(tidyverse)
library(ggplot2)
ggplot(data = mpg) + geom_smooth(mapping = aes(x = displ, y = hwy, linetype = drv))
ggplot(data = mpg)+
geom_smooth(mapping = aes(x = displ, y = hwy))
# 加载两个packages
library(tidyverse)
library(ggplot2)
ggplot(data = mpg)+
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg)+
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
ggplot(data = mpg)+
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg) +
geom_smooth(mapping = aes(x = displ, y = hwy, group = drv))
ggplot(data = mpg)+
geom_smooth(
mapping = aes(x = displ, y = hwy, color = drv),
show.legend = FALSE
)
ggplot(data = mpg)+
geom_point(mapping = aes(x = displ, y = hwy)) +
geom_smooth(mapping = aes(x = displ, y = hwy))
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point() +
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +  # 让散点图图层的颜色按照class来区分
geom_smooth()
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(
data = filter(mpg, class == "subcompact"),
se = FALSE
)
ggplot(data = mpg, mapping = aes(x = displ, y = hwy)) +
geom_point(mapping = aes(color = class)) +
geom_smooth(
data = filter(mpg, class == "subcompact"),  # 选取微型车
se = FALSE
)
ggplot(data = mpg,
mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth(se = FALSE)
ggplot(data = mpg,
mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth()
ggplot(data = mpg,
mapping = aes(x = displ, y = hwy, color = drv)) +
geom_point() +
geom_smooth()
ggplot() +
geom_point(data = mpg,
mapping = aes(x = displ, y = hwy)
) +
geom_smooth(data = mpg,
mapping = aes(x = displ, y = hwy)
)
plot(cars)
install.packages(c('rmarkdown', 'knitr', 'caTools'，"rticles"))
install.packages(c('rmarkdown', 'knitr', 'caTools'，"rticles"))
install.packages("rmarkdown")
install.packages("rmarkdown")
install.packages("knitr")
install.packages("caTools")
install.packages("rticles")
install.packages("FSelector")
library(FSelector)
info <- data.frame(Outlook = c("Rainy", "Rainy", "Overcast", "Sunny", "Sunny", "Sunny", "Overcast", "Rainy", "Rainy", "Sunny", "Rainy", "Overcast", "Overcast", "Sunny"))
# load library
library(tidyverse)
# Load the dataset
data <- read.csv("wber9.csv")
head(data)
library(tidyverse)
# load dataset
beer_df <- read_csv("beer.csv")
# 获得当前的路径
getwd()
# 获得当前的路径
getwd()
# 设置当前的路径
setwd("C:/Users/yinia/Desktop/RForDataScienceNotes/06-工作流：项目")
getwd()
